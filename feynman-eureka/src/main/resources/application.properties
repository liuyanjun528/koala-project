#通过eureka.client.registerWithEureka：false和fetchRegistry：false来表明自己是一个eureka server.
#在默认设置下，eureka服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为
#eureka.client.registerWithEureka=true（默认值true）时，会向Eureka Server注册进行注册，Eureka Server会保存注册信息到内存中。
eureka.client.registerWithEureka=false
eureka.client.fetchRegistry=false
#它会定时（值由eureka.client.registry-fetch-interval-seconds定义，默认值为30s）向注册中心更新实例。
#eureka.client.fetchRegistry=false
server.port=8761
eureka.instance.hostname=localhost
#注册中心的名称
spring.application.name=feynman-eureka
#指定erreka-server注册中心的地址
#eureka.client.service-url.defaultZone=http://com.lyj:8777/eureka/
#eureka.server.eviction-interval-timer-in-ms//清理实例间隔（单位毫秒，默认是60*1000）
#eureka.server.eviction-interval-timer-in-ms:3000
#此值由eureka.instance.lease-expiration-duration-in-seconds定义，默认值为90s）内没有收到心跳，则会注销此实例。
#eureka.instance.lease-expiration-duration-in-seconds:10
# 关闭自我保护模式是否开启自我保护，默认为 true，在开启自我保护的情况下，注册中心在丢失客户端时，会进入自动保护模式，
#注册中心并不会将该服务从注册中心删除掉。这里我设置为 false，即关闭自我保护。根据我的经验，如果设置为 true，
#在负载均衡条件下，一个服务挂掉后，注册中心并没有删掉该服务，会导致客户端请求的时候可能会请求到该服务，导致系统无法访问，
#所以我推荐将这个属性设置为 false。
eureka.server.enable-self-preservation=true
# 设置如果Eureka Server启动时无法从临近Eureka Server节点获取注册信息，它多久不对外提供注册服务
#eureka.server.wait-time-in-ms-when-sync-empty:6000
# 集群之间相互更新节点信息的时间频率
#eureka.server.peer-eureka-nodes-update-interval-ms:1000
